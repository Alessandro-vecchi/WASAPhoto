openapi: 3.0.3
info:
  title: WASAPhoto - OpenAPI 3.0
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! \
    Directly from your PC, you can upload your photos, and they will be visible to everyone who is following you.
    
    Functional design specification:
    
    - The login is performed by specifying the username and it returns a crafted userID(token).
    - Once in, the user sees on the web app the stream of photos of the users that he follows ordered in reverse chronological order.
    - Each photo has information about the date-time it was uploaded, the number of likes and the number of comments.
    - Users can place a like to photos from other users(not from themselves);
    - Users can remove likes from photos of other users;
    - Users can add comments to any photo and can edit comments to any photo(even for themselves);
    - Only the author can remove comments from a photo;
    - Users have their own personal profiles.
    
    When you access to the personal profile of a user you can see:
    - user’s photos (in reverse chronological order), 
    - their followers,
    - their following, 
    - how many photos have been uploaded.
    
    User action:
    - change his/her own username,
    - follow/unfollow other users,
    - upload photos, 
    - remove photos: also remove likes and comments.
    - Users can ban other users.
    If Alice bans Bob, Bob won't be able to see any information about Alice. 
    Alice can decide to remove the ban at any moment.
    
    Finally:
    - User profiles can be searched via username.
    
    The following API are required
    • doLogin
    • getMyStream
    • setMyUserName
    • followUser
    • unfollowUser
    • banUser
    • unbanUser
    • getUserProfile
    • uploadPhoto
    • deletePhoto
    • likePhoto
    • unlikePhoto
    • commentPhoto
    • uncommentPhoto
    
    This project is done for our Web and Software Architecture course. 
    
  contact:
    email: vecchi.1938069@studenti.uniroma1.it
  license:
    name: Sapienza University
    url: https://www.uniroma1.it/it/
  version: 1.0.11
externalDocs:
  description: Find out more about the project
  url: http://gamificationlab.uniroma1.it/notes/Project.pdf
  
servers:
  - url: '{protocol}://WASAphoto.com'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
  
tags:
  - name: User
    description: Users actions
  - name: Profile
    description: Represents the profile page of the user
  - name: Likes
    description: Liking and unliking
  - name: Comments
    description: Commenting
  - name: Login
    description: Simplified login
    
components:
  parameters:
    userID:
      name: userID
      in: path
      required: true
      description: User whose profile belongs to. 
      schema: { $ref: "#/components/schemas/UserID" }
    photoID:
      name: photoID
      in: path
      required: true
      description: ID of the picture considered
      schema: 
        description: Unique photo identifier
        type: integer
        format: int64
        example: 2385678
        readOnly: true
        
  # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth:
      in: header
      type: http
      scheme: bearer
      name : UserIDtoken
          
  schemas:
    Photo:
      type: object
      properties:
        id:
          description: Unique photo identifier
          type: integer
          format: int64
          example: 2385678
          readOnly: true
        timestamp:
          description: Date and time of creation following RFC3339 
          type: string
          format: date-time
          example: 2022-11-04T16:35:22-04:00
        likes_count:
          description: Number of likes
          type: integer
          example: 169
        comments_count:
          description: Number of comments
          type: integer
          example: 15
        caption:
          description: A written description or explanation about a photo to provide more context
          type: string
          example: "Vodka may not be the answer but it’s worth a shot"
        username: #owner
          description: Username of the owner of the picture
          type: string
          minLength: 3
          maxLength: 16
          example: "ChiaraFerragni69"
          
    UserID:
      type: object 
      properties:
        identifier:
          description: |
            The simplified login tell us that, since there is no password, the username must be unique among the application. 
            Logging in with an existing name will grant access to that user information. 
            Hence it would make sense to use the username as ID since we don't have to represent real people but virtual people, namely usernames, by simplifying in this way the ReST OpenAPI. 
            However, since it's not applicable in a real life scenario, I will use a userID that's different from the username. Thus, I'm choosing 10 chars long strings because they can store billion of billions of information(64^10, since the alphabet is "[a-z][A-Z][0-9]-_", 26+26+10+2=64), they are nicer to read then integers since they are shorter and almost equally fast to compute.
          type: string
          format: byte #base64 encoded character
          minLength: 10
          maxLength: 10
          example: "ah-CJY0z9_"
          
    Comment:
      type: object
      properties:
        commentId:
          description: Unique comment identifier
          type: string
          example: "CksvyZXtXRE"
          readOnly: true
        created_in:
          description: When the comment was written
          type: string
          format: date-time
          example: 2022-11-04T16:35:22-04:00
        author: #/username
          type: object
          properties:
            id:
              type: string
              format: byte #base64 encoded character
              minLength: 10
              maxLength: 10
              example: "ah-CJY0z9_"
            username:
              description: Author of the comment just written
              type: string
              pattern: 'ˆ.*?$'
              minLength: 3
              maxLength: 16
              example: "MartinaLove04"
        body:
          description: Text of the comment written
          type: string
          example: "No vabbè amo sei bellissima"
        modified_in:
          description: When the comment was modified
          type: string
          format: date-time
          example: 2022-11-04T19:35:22-04:00
        is_reply_comment:
          description: States id the comment is a reply or not
          type: boolean
          default: false
          example: true
    
    Like:
      type: object
      properties:
        user: #
          description: User who put the like
          type: string
          example: "AleVecchi01"

    Username:
      type: object
      properties:
        username:
          type: string
          example: LeoMessi88
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          
    Profile:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 16
          example: "JohnCena89"
        pictures_count:
          type: integer
          example: 169
        followers_count:
          type: integer
          example: 2567
        follows_count:
          description: number of users that the user follows
          type: integer
          example: 689
        profile_picture_url:
          description: URL of the profile picture
          type: string
          example: "http://gamificationlab.uniroma1.it/images/gamificationlab-logo-transparent.png"
        bio:
          description: Biography of the profile
          type: string
          example: "Discover what's next on WASAPhoto"
  responses:
    BadRequest: 
        description: |-
          The request was not compliant with the documentation
          (eg. missing fields, etc).
    InternalServerError: 
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    UnauthorizedError:
      description: Access token is missing or invalid.
          
paths:
  /session/:
    #leaving post for generality purposes, even though put would be better in this specific case.
    post: 
      tags: 
        - Login
      summary: Logs in the user 
      description: |-
              If the user does not exist, it will be created,
              and an identifier is returned.
              If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserID'
  
  
  /user/:
    get:
      tags:
        - User
      summary: Find user by username
      description: ''
      operationId: getUserProfileByName
      parameters:
        - name: username
          in: query
          description: Username to filter by
          required: false
          explode: false
          schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid username value

  /user/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      tags:
       - Profile
      summary:  Get user profile
      description: >
        The profile of an user contains the username, the number of photos it has, the number of follows/followers, a bio and a profile picture.
      operationId: getUserProfile
      responses: 
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    
    patch:
      tags:
        - User
      summary: Update username
      description: This can only be done by the logged in user.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Username'
        "204":
          description: No content. Update occured but didn't send back any representation or description.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "409":
          description: Conflict. Inserting an old username.
      security:
        - bearerAuth: []
    
    delete:
      tags:
        - User
      summary: Delete username
      description: This can only be done by the logged in user.
      operationId: deleteUsername
      responses:
        "204": { description: Username deleted successfully }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "404": { description: Username not found }
      security:
        - bearerAuth: []
  
  /user/{userID}/follow/:
    parameters:
      - $ref: "#/components/parameters/userID"
    
    put:
      tags:
        - User
      summary: Follow user
      description: >
        Following an user imply incrementing his followers count by one, our follows count by one and to add his profile in our stream
      operationId: followUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "201":
          description: Follow created.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

    delete:
      tags:
        - User
      summary: Unfollow user
      description: This can only be done by the logged in user.
      operationId: unfollowUser
      responses:
        "204": { description: User unfollowed successfully. }
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /stream/:
    get:
      tags:
      - Stream
      summary: Stream user
      description: >
        Homepage of the WASAPhoto web app that corresponds to a stream of photo of the users the authenticated user is following
      operationId: getMyStream
      responses:
        "200":
          description: Array of photos ordered in reverse chronological order of the users we are following
          content:
            application/json: 
              schema:
                type: array
                items: { $ref: "#/components/schemas/Photo" }
        "204": { description: No content. User still doesn't follow any user.}

  /user/{userID}/ban/:
    parameters:
      - $ref: "#/components/parameters/userID"
    
    put:
      tags:
        - User
      summary: Ban user
      description: >
        If Alice bans Bob, Bob won't be able to see any information about Alice. Alice can decide to remove the ban at any moment.
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        "201":
          description: Ban created.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
          - bearerAuth: []

    delete:
      tags:
        - User
      summary: Unban user
      description: This can only be done by the logged in user. Bob can now see information about Alice.
      operationId: unbanUser
      responses:
        "204": { description: User unbanned successfully. }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /user/{userID}/photo/:
    parameters:
      - $ref: "#/components/parameters/userID"
    
    get:
      tags:
       - Profile
      summary: >
        Retrieve collection of photos
      description: Retrieve collection of photos resources of a certain user
      operationId: getPhotos
      parameters:
        - in: query
          name: sort_by
          schema:
            type: string
            format: date-time
          description: Sorting in [reverse] chronological order by date
          explode: true
        - in: query
          name: order
          schema:
            type: string
            description: Sorting order
            enum:
              - asc
              - desc
          explode: true
              
      responses: 
        "200":
          description: List of photos ordered in reverse chronological order
          content:
            application/json: 
              schema:
                type: array
                items: { $ref: "#/components/schemas/Photo" } 
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
    post:
      tags:
        - Profile
      summary: Upload a photo
      description: Upload a photo on the profile of a specific user.
      operationId: uploadPhoto
      requestBody:
        content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
      responses: 
        "201":
          description: Photo uploaded successfully 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" } 
        "400": { $ref: "#/components/responses/BadRequest" }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
        - bearerAuth: []
        
      
  /photo/{photoID}:
    description: >
      This resource represents an individual photo in the system belonging to the user user-ID.
      Each photo is identified by a numeric `ID`.
      
    parameters:
      - $ref: "#/components/parameters/photoID"
      
    get:
      tags:
       - Profile
      summary: Get a photo
      description: Retrieve a single photo
      operationId: getPhoto
      responses: 
        "200":
          description: Photo found
          content:
            application/json: 
              schema:
                { $ref: "#/components/schemas/Photo" }
        "204": { description: No content}
        "404": { description: Not found }
      
    delete:
      tags:
          - Profile
      summary: Deletes a photo
      description: Deletes a photo from a user profile. It also removes like and comments.
      operationId: deletePhoto
      responses:
        "204": { description: Picture deleted successfully }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "404": { description: Picture not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      security:
          - bearerAuth: []
  
  /photo/{photoID}/like/:
    parameters:
      - $ref: '#/components/parameters/photoID'
    get:
      tags:
        - Likes
      summary: Users that liked the photo
      description: Get list of users that added a like.
      operationId: getLikes
      responses:
        "200":
          description: Likes retrieved successfully.
          content:
            application/json: 
              schema:
                type: array
                items: { $ref: "#/components/schemas/Like" }
        "204": { description: No content}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
      
  /like/{likeID}:
    parameters:
      - name: likeID
        in: path
        required: true
        description: User who is liking the photo
        schema:
          { $ref: "#/components/schemas/Like" }
          
    put:
      tags:
        - Likes
      summary: Like a photo
      description: Add a like on a photo. I'm using put for its idempotency.
      operationId: likePhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        "201":
          description: Like created.
        "204":
          description: No content. Like already inserted.
      security:
        - bearerAuth: []
    
    delete:
      tags:
        - Likes
      summary: Unlike a photo
      description: Remove a like from a photo
      operationId: unlikePhoto
      responses:
        "204":
          description: No content. Like removed.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
      
  /photo/{photoID}/comments/:
    parameters:
      - $ref: "#/components/parameters/photoID"
      
    get:
      tags:
        - Comments
      summary: Read all comments
      description: Read all comments under the photo photoID.
      operationId: readCommentsPhoto
      responses: 
        "200":
          description: List of comments
          content:
            application/json: 
              schema:
                type: array
                items: { $ref: "#/components/schemas/Comment" }
      
        
    post:
      tags:
        - Comments
      summary: Write a comment
      description: Write a comment on a photo of a user.
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "201": 
          description: Comment created
          content:
            application/json: 
              schema:
                { $ref: "#/components/schemas/Comment" } 
        "204":
          description: No content
        "400":
          description: Bad request. Invalid input data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
      
    delete:
      tags:
        - Comments
      summary: Delete all comments
      description: the Author can delete delete all comments under a photo.
      operationId: removeCommentsPhoto
      responses:
        "204":
          description: No content
        "400":
          description: Not Found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  
  /comments/{commentID}:
    parameters:
      - name: commentID
        in: path
        description: ID of the comment
        required: true
        schema:
          type: string
    
    put:
      tags:
        - Comments
      summary: Modify or reply to a comment
      description: |
        An user can modify its own comment or reply to a comment of another user if the boolean flag is_reply_comment is activated
      operationId: replyComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: Comment updated successfully
        "201": 
          description: Comment created
          content:
            application/json: 
              schema:
                { $ref: "#/components/schemas/Comment" }
        "400":
          description: Bad request. Invalid input data.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "409":
          description: Conflict.

      security:
        - bearerAuth: []
      
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: |
        The Author and the Owner of the profile can delete a specific comment under a specific photo.
      operationId: uncommentPhoto
      #parameters:
       # - name: authorization_header
        #  in: header
         # description: API key of either the Author or the Owner
          #required: true
        #  schema:
         #   type: string
      responses:
        "204":
          description: No content
        "400":
          description: Not Found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
      
