openapi: 3.0.3
info:
  title: WASAPhoto - OpenAPI 3.0
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! Directly from your PC, you can upload your photos, and they will be visible to everyone who is following you.
    
    Functional design specification
    
    Each user will be presented with a stream of photos in reverse chronological order, with information about when it was uploaded (date and time) and how many likes and comments it has. Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any photo (even those uploaded by themself). Comments can be removed by the author only.
    Users can ban other users. If Alice (user) bans Eve (user), Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment.
    Users will have their own personal profiles. The personal profile page for user detail: user’s photos (in reverse chronological order), their followers and following, and how many photos have been uploaded. Each user can change his/her own username, upload photos, remove photos, and follow/unfollow other users. Removal of a photo will also remove likes and comments.
    User profiles can be searched via username.
    The login is performed by specifying the username. See the “Simplified login” section for details.
    
    • setMyUserName
    • followUser
    • unfollowUser
    • banUser
    • unbanUser
    • getUserProfile • getMyStream
    • uploadPhoto
    • likePhoto
    • unlikePhoto
    • commentPhoto
    • uncommentPhoto 
    • deletePhoto
    
    This project is done for our Web and Software Architecture course. 
    
  contact:
    email: vecchi.1938069@studenti.uniroma1.it
  license:
    name: Sapienza University
    url: https://www.uniroma1.it/it/
  version: 1.0.11
externalDocs:
  description: Find out more about the project
  url: http://gamificationlab.uniroma1.it/notes/Project.pdf
servers:
  - url: not yet ready
  
tags:
  - name: Photo
    description: Operations on photos
  - name: User
    description: Dealing with users
    
paths:
  /photo:
    summary: Represents a photo
    description: >
      This resource represents a photo in the system.
      
  /photo/{PhotoID}:
    summary: Represents a photo
    description: >
      This resource represents an individual photo in the system.
      Each photo is identified by a numeric `id`.
      
    delete:
      tags:
          - Photo
      summary: Deletes a photo
      description: Deletes a photo and it also removes like and comments.
      operationId: deletePhoto
      
    post:
      tags:
        - Photo
      summary: Upload a Photo
      description: Upload a photo on the app.
      operationID: uploadPhoto
  
  /photo/{PhotoID}/like:
    put:
      tags:
        - Photo
      summary: Like a photo
      description: Add a like on a photo.
      operationID: likePhoto
      
  /photo/{PhotoID}/comment:
    post:
      tags:
        - Photo
      summary: Write a comment
      description: Write a comment on a photo.
      operationID: commentPhoto
  
  /photo/{PhotoID}/comment/{commentID}:
    delete:
      tags:
        - Photo
      summary: delete a comment
      description: the Author can delete a specific comment under a specific photo.
      operationID: uncommentPhoto
  
  /user:
    post:
      tags:
        - user
      summary: Create user username
      description: Setting the username of the client.
      operationId: setMyUserName
  
  /user/{username}:
    get:
      tags:
        - user
      summary: Find user by username
      description: ''
      operationId: getUserProfileByName
    
    put:
      tags:
        - user
      summary: Update username
      description: This can only be done by the logged in user.
      operationId: updateUsername
    
    delete:
      tags:
        - user
      summary: Delete username
      description: This can only be done by the logged in user.
      operationId: deleteUsername
      
  /user/{username}/?action=
  